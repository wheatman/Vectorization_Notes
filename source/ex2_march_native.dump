Dump of assembler code for function count_pairs:
ex2a.c:
7	count_pairs(uint8_t *data, uint64_t size, uint8_t target) {
   0x00000000000019c0 <+0>:	f3 0f 1e fa	endbr64 

8	  uint64_t total = 0;
9	  uint16_t check = target | (target << 8U);
   0x00000000000019c4 <+4>:	48 8d 74 77 ff	lea    -0x1(%rdi,%rsi,2),%rsi
   0x00000000000019c9 <+9>:	41 89 d0	mov    %edx,%r8d
   0x00000000000019cc <+12>:	48 89 f1	mov    %rsi,%rcx
   0x00000000000019cf <+15>:	41 c1 e0 08	shl    $0x8,%r8d
   0x00000000000019d3 <+19>:	0f b6 d2	movzbl %dl,%edx
   0x00000000000019d6 <+22>:	48 29 f9	sub    %rdi,%rcx
   0x00000000000019d9 <+25>:	41 09 d0	or     %edx,%r8d

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x00000000000019dc <+28>:	31 c0	xor    %eax,%eax
   0x00000000000019de <+30>:	83 e1 07	and    $0x7,%ecx
   0x00000000000019e1 <+33>:	0f 84 93 00 00 00	je     0x1a7a <count_pairs+186>
   0x00000000000019e7 <+39>:	48 83 f9 01	cmp    $0x1,%rcx
   0x00000000000019eb <+43>:	74 73	je     0x1a60 <count_pairs+160>
   0x00000000000019ed <+45>:	48 83 f9 02	cmp    $0x2,%rcx
   0x00000000000019f1 <+49>:	74 5e	je     0x1a51 <count_pairs+145>
   0x00000000000019f3 <+51>:	48 83 f9 03	cmp    $0x3,%rcx
   0x00000000000019f7 <+55>:	74 49	je     0x1a42 <count_pairs+130>
   0x00000000000019f9 <+57>:	48 83 f9 04	cmp    $0x4,%rcx
   0x00000000000019fd <+61>:	74 32	je     0x1a31 <count_pairs+113>
   0x00000000000019ff <+63>:	48 83 f9 05	cmp    $0x5,%rcx
   0x0000000000001a03 <+67>:	74 1b	je     0x1a20 <count_pairs+96>
   0x0000000000001a05 <+69>:	48 83 f9 06	cmp    $0x6,%rcx
   0x0000000000001a09 <+73>:	0f 85 e9 00 00 00	jne    0x1af8 <count_pairs+312>

11	    total += (load16(data + i) == check);
   0x0000000000001a0f <+79>:	45 31 c9	xor    %r9d,%r9d
   0x0000000000001a12 <+82>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a16 <+86>:	41 0f 94 c1	sete   %r9b
   0x0000000000001a1a <+90>:	4c 01 c8	add    %r9,%rax

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x0000000000001a1d <+93>:	48 ff c7	inc    %rdi

11	    total += (load16(data + i) == check);
   0x0000000000001a20 <+96>:	45 31 d2	xor    %r10d,%r10d
   0x0000000000001a23 <+99>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a27 <+103>:	41 0f 94 c2	sete   %r10b
   0x0000000000001a2b <+107>:	4c 01 d0	add    %r10,%rax

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x0000000000001a2e <+110>:	48 ff c7	inc    %rdi

11	    total += (load16(data + i) == check);
   0x0000000000001a31 <+113>:	45 31 db	xor    %r11d,%r11d
   0x0000000000001a34 <+116>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a38 <+120>:	41 0f 94 c3	sete   %r11b
   0x0000000000001a3c <+124>:	4c 01 d8	add    %r11,%rax

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x0000000000001a3f <+127>:	48 ff c7	inc    %rdi

11	    total += (load16(data + i) == check);
   0x0000000000001a42 <+130>:	31 d2	xor    %edx,%edx
   0x0000000000001a44 <+132>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a48 <+136>:	0f 94 c2	sete   %dl
   0x0000000000001a4b <+139>:	48 01 d0	add    %rdx,%rax

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x0000000000001a4e <+142>:	48 ff c7	inc    %rdi

11	    total += (load16(data + i) == check);
   0x0000000000001a51 <+145>:	31 c9	xor    %ecx,%ecx
   0x0000000000001a53 <+147>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a57 <+151>:	0f 94 c1	sete   %cl
   0x0000000000001a5a <+154>:	48 01 c8	add    %rcx,%rax

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x0000000000001a5d <+157>:	48 ff c7	inc    %rdi

11	    total += (load16(data + i) == check);
   0x0000000000001a60 <+160>:	45 31 c9	xor    %r9d,%r9d
   0x0000000000001a63 <+163>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a67 <+167>:	41 0f 94 c1	sete   %r9b
   0x0000000000001a6b <+171>:	48 ff c7	inc    %rdi
   0x0000000000001a6e <+174>:	4c 01 c8	add    %r9,%rax

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x0000000000001a71 <+177>:	48 39 fe	cmp    %rdi,%rsi
   0x0000000000001a74 <+180>:	0f 84 96 00 00 00	je     0x1b10 <count_pairs+336>

11	    total += (load16(data + i) == check);
   0x0000000000001a7a <+186>:	45 31 d2	xor    %r10d,%r10d
   0x0000000000001a7d <+189>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a81 <+193>:	41 0f 94 c2	sete   %r10b
   0x0000000000001a85 <+197>:	4c 01 d0	add    %r10,%rax
   0x0000000000001a88 <+200>:	45 31 db	xor    %r11d,%r11d
   0x0000000000001a8b <+203>:	66 44 39 47 01	cmp    %r8w,0x1(%rdi)
   0x0000000000001a90 <+208>:	41 0f 94 c3	sete   %r11b
   0x0000000000001a94 <+212>:	4c 01 d8	add    %r11,%rax
   0x0000000000001a97 <+215>:	31 d2	xor    %edx,%edx
   0x0000000000001a99 <+217>:	66 44 39 47 02	cmp    %r8w,0x2(%rdi)
   0x0000000000001a9e <+222>:	0f 94 c2	sete   %dl
   0x0000000000001aa1 <+225>:	48 01 d0	add    %rdx,%rax
   0x0000000000001aa4 <+228>:	31 c9	xor    %ecx,%ecx
   0x0000000000001aa6 <+230>:	66 44 39 47 03	cmp    %r8w,0x3(%rdi)
   0x0000000000001aab <+235>:	0f 94 c1	sete   %cl
   0x0000000000001aae <+238>:	48 01 c8	add    %rcx,%rax
   0x0000000000001ab1 <+241>:	45 31 c9	xor    %r9d,%r9d
   0x0000000000001ab4 <+244>:	66 44 39 47 04	cmp    %r8w,0x4(%rdi)
   0x0000000000001ab9 <+249>:	41 0f 94 c1	sete   %r9b
   0x0000000000001abd <+253>:	4c 01 c8	add    %r9,%rax
   0x0000000000001ac0 <+256>:	45 31 d2	xor    %r10d,%r10d
   0x0000000000001ac3 <+259>:	66 44 39 47 05	cmp    %r8w,0x5(%rdi)
   0x0000000000001ac8 <+264>:	41 0f 94 c2	sete   %r10b
   0x0000000000001acc <+268>:	4c 01 d0	add    %r10,%rax
   0x0000000000001acf <+271>:	45 31 db	xor    %r11d,%r11d
   0x0000000000001ad2 <+274>:	66 44 39 47 06	cmp    %r8w,0x6(%rdi)
   0x0000000000001ad7 <+279>:	41 0f 94 c3	sete   %r11b
   0x0000000000001adb <+283>:	4c 01 d8	add    %r11,%rax
   0x0000000000001ade <+286>:	31 d2	xor    %edx,%edx
   0x0000000000001ae0 <+288>:	66 44 39 47 07	cmp    %r8w,0x7(%rdi)
   0x0000000000001ae5 <+293>:	0f 94 c2	sete   %dl
   0x0000000000001ae8 <+296>:	48 83 c7 08	add    $0x8,%rdi
   0x0000000000001aec <+300>:	48 01 d0	add    %rdx,%rax

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x0000000000001aef <+303>:	48 39 fe	cmp    %rdi,%rsi
   0x0000000000001af2 <+306>:	75 86	jne    0x1a7a <count_pairs+186>

12	  }
13	  return total;
   0x0000000000001af4 <+308>:	c3	retq   
   0x0000000000001af5 <+309>:	0f 1f 00	nopl   (%rax)

11	    total += (load16(data + i) == check);
   0x0000000000001af8 <+312>:	31 c0	xor    %eax,%eax
   0x0000000000001afa <+314>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001afe <+318>:	0f 94 c0	sete   %al

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x0000000000001b01 <+321>:	48 ff c7	inc    %rdi
   0x0000000000001b04 <+324>:	e9 06 ff ff ff	jmpq   0x1a0f <count_pairs+79>
   0x0000000000001b09 <+329>:	0f 1f 80 00 00 00 00	nopl   0x0(%rax)
   0x0000000000001b10 <+336>:	c3	retq   
End of assembler dump.
