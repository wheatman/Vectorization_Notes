Dump of assembler code for function count_pairs:
ex1a.c:
7	count_pairs(uint16_t *data, uint64_t size, uint8_t target) {
   0x00000000000019c0 <+0>:	f3 0f 1e fa	endbr64 

8	  uint64_t total = 0;
9	  uint16_t check = target | (target << 8U);
   0x00000000000019c4 <+4>:	41 89 d0	mov    %edx,%r8d
   0x00000000000019c7 <+7>:	41 c1 e0 08	shl    $0x8,%r8d
   0x00000000000019cb <+11>:	0f b6 d2	movzbl %dl,%edx
   0x00000000000019ce <+14>:	41 09 d0	or     %edx,%r8d

10	  for (uint64_t i = 0; i < size; i++) {
   0x00000000000019d1 <+17>:	48 85 f6	test   %rsi,%rsi
   0x00000000000019d4 <+20>:	0f 84 a6 02 00 00	je     0x1c80 <count_pairs+704>
   0x00000000000019da <+26>:	48 8d 46 ff	lea    -0x1(%rsi),%rax
   0x00000000000019de <+30>:	48 83 f8 0e	cmp    $0xe,%rax
   0x00000000000019e2 <+34>:	0f 86 9b 02 00 00	jbe    0x1c83 <count_pairs+707>
   0x00000000000019e8 <+40>:	49 89 f1	mov    %rsi,%r9
   0x00000000000019eb <+43>:	49 c1 e9 04	shr    $0x4,%r9
   0x00000000000019ef <+47>:	49 c1 e1 05	shl    $0x5,%r9
   0x00000000000019f3 <+51>:	49 8d 0c 39	lea    (%r9,%rdi,1),%rcx
   0x00000000000019f7 <+55>:	41 83 e1 20	and    $0x20,%r9d
   0x00000000000019fb <+59>:	c4 e2 7d 79 25 f0 06 00 00	vpbroadcastw 0x6f0(%rip),%ymm4        # 0x20f4
   0x0000000000001a04 <+68>:	62 d2 7d 28 7b e8	vpbroadcastw %r8d,%ymm5
   0x0000000000001a0a <+74>:	49 89 fa	mov    %rdi,%r10
   0x0000000000001a0d <+77>:	c4 41 01 ef ff	vpxor  %xmm15,%xmm15,%xmm15
   0x0000000000001a12 <+82>:	74 5c	je     0x1a70 <count_pairs+176>

11	    total += (data[i] == check);
   0x0000000000001a14 <+84>:	c5 d5 75 07	vpcmpeqw (%rdi),%ymm5,%ymm0
   0x0000000000001a18 <+88>:	4c 8d 57 20	lea    0x20(%rdi),%r10
   0x0000000000001a1c <+92>:	c5 fd db d4	vpand  %ymm4,%ymm0,%ymm2
   0x0000000000001a20 <+96>:	c4 e3 7d 39 d3 01	vextracti128 $0x1,%ymm2,%xmm3
   0x0000000000001a26 <+102>:	c4 e2 7d 33 ca	vpmovzxwd %xmm2,%ymm1
   0x0000000000001a2b <+107>:	c4 e2 7d 33 f3	vpmovzxwd %xmm3,%ymm6
   0x0000000000001a30 <+112>:	c4 c3 7d 39 f0 01	vextracti128 $0x1,%ymm6,%xmm8
   0x0000000000001a36 <+118>:	c4 c3 7d 39 cc 01	vextracti128 $0x1,%ymm1,%xmm12
   0x0000000000001a3c <+124>:	c4 e2 7d 35 fe	vpmovzxdq %xmm6,%ymm7
   0x0000000000001a41 <+129>:	c4 42 7d 35 c8	vpmovzxdq %xmm8,%ymm9
   0x0000000000001a46 <+134>:	c4 62 7d 35 d9	vpmovzxdq %xmm1,%ymm11
   0x0000000000001a4b <+139>:	c4 42 7d 35 ec	vpmovzxdq %xmm12,%ymm13
   0x0000000000001a50 <+144>:	c4 41 45 d4 d1	vpaddq %ymm9,%ymm7,%ymm10
   0x0000000000001a55 <+149>:	c4 41 25 d4 f5	vpaddq %ymm13,%ymm11,%ymm14
   0x0000000000001a5a <+154>:	c4 41 2d d4 fe	vpaddq %ymm14,%ymm10,%ymm15

10	  for (uint64_t i = 0; i < size; i++) {
   0x0000000000001a5f <+159>:	49 39 ca	cmp    %rcx,%r10
   0x0000000000001a62 <+162>:	0f 84 ad 00 00 00	je     0x1b15 <count_pairs+341>
   0x0000000000001a68 <+168>:	0f 1f 84 00 00 00 00 00	nopl   0x0(%rax,%rax,1)

11	    total += (data[i] == check);
   0x0000000000001a70 <+176>:	c4 c1 55 75 02	vpcmpeqw (%r10),%ymm5,%ymm0
   0x0000000000001a75 <+181>:	49 83 c2 40	add    $0x40,%r10
   0x0000000000001a79 <+185>:	c5 fd db d4	vpand  %ymm4,%ymm0,%ymm2
   0x0000000000001a7d <+189>:	c4 e2 7d 33 ca	vpmovzxwd %xmm2,%ymm1
   0x0000000000001a82 <+194>:	c4 e3 7d 39 d3 01	vextracti128 $0x1,%ymm2,%xmm3
   0x0000000000001a88 <+200>:	c4 c1 55 75 52 e0	vpcmpeqw -0x20(%r10),%ymm5,%ymm2
   0x0000000000001a8e <+206>:	c4 e2 7d 33 f3	vpmovzxwd %xmm3,%ymm6
   0x0000000000001a93 <+211>:	c4 c3 7d 39 f0 01	vextracti128 $0x1,%ymm6,%xmm8
   0x0000000000001a99 <+217>:	c5 ed db dc	vpand  %ymm4,%ymm2,%ymm3
   0x0000000000001a9d <+221>:	c4 e2 7d 35 fe	vpmovzxdq %xmm6,%ymm7
   0x0000000000001aa2 <+226>:	c4 42 7d 35 c8	vpmovzxdq %xmm8,%ymm9
   0x0000000000001aa7 <+231>:	c4 c3 7d 39 cc 01	vextracti128 $0x1,%ymm1,%xmm12
   0x0000000000001aad <+237>:	c4 e3 7d 39 de 01	vextracti128 $0x1,%ymm3,%xmm6
   0x0000000000001ab3 <+243>:	c4 41 45 d4 d1	vpaddq %ymm9,%ymm7,%ymm10
   0x0000000000001ab8 <+248>:	c4 62 7d 35 d9	vpmovzxdq %xmm1,%ymm11
   0x0000000000001abd <+253>:	c4 42 7d 35 ec	vpmovzxdq %xmm12,%ymm13
   0x0000000000001ac2 <+258>:	c4 e2 7d 33 cb	vpmovzxwd %xmm3,%ymm1
   0x0000000000001ac7 <+263>:	c4 e2 7d 33 fe	vpmovzxwd %xmm6,%ymm7
   0x0000000000001acc <+268>:	c4 41 25 d4 f5	vpaddq %ymm13,%ymm11,%ymm14
   0x0000000000001ad1 <+273>:	c4 c3 7d 39 f9 01	vextracti128 $0x1,%ymm7,%xmm9
   0x0000000000001ad7 <+279>:	c4 c3 7d 39 cd 01	vextracti128 $0x1,%ymm1,%xmm13
   0x0000000000001add <+285>:	c4 c1 2d d4 c6	vpaddq %ymm14,%ymm10,%ymm0
   0x0000000000001ae2 <+290>:	c4 62 7d 35 c7	vpmovzxdq %xmm7,%ymm8
   0x0000000000001ae7 <+295>:	c4 42 7d 35 d1	vpmovzxdq %xmm9,%ymm10
   0x0000000000001aec <+300>:	c4 62 7d 35 e1	vpmovzxdq %xmm1,%ymm12
   0x0000000000001af1 <+305>:	c4 42 7d 35 f5	vpmovzxdq %xmm13,%ymm14
   0x0000000000001af6 <+310>:	c5 05 d4 f8	vpaddq %ymm0,%ymm15,%ymm15
   0x0000000000001afa <+314>:	c4 41 3d d4 da	vpaddq %ymm10,%ymm8,%ymm11
   0x0000000000001aff <+319>:	c4 c1 1d d4 c6	vpaddq %ymm14,%ymm12,%ymm0
   0x0000000000001b04 <+324>:	c5 a5 d4 d0	vpaddq %ymm0,%ymm11,%ymm2
   0x0000000000001b08 <+328>:	c5 05 d4 fa	vpaddq %ymm2,%ymm15,%ymm15

10	  for (uint64_t i = 0; i < size; i++) {
   0x0000000000001b0c <+332>:	49 39 ca	cmp    %rcx,%r10
   0x0000000000001b0f <+335>:	0f 85 5b ff ff ff	jne    0x1a70 <count_pairs+176>
   0x0000000000001b15 <+341>:	62 73 fd 28 39 fc 01	vextracti64x2 $0x1,%ymm15,%xmm4
   0x0000000000001b1c <+348>:	c5 01 d4 fc	vpaddq %xmm4,%xmm15,%xmm15
   0x0000000000001b20 <+352>:	c4 c1 61 73 df 08	vpsrldq $0x8,%xmm15,%xmm3
   0x0000000000001b26 <+358>:	c5 81 d4 cb	vpaddq %xmm3,%xmm15,%xmm1
   0x0000000000001b2a <+362>:	49 89 f3	mov    %rsi,%r11
   0x0000000000001b2d <+365>:	c4 e1 f9 7e c8	vmovq  %xmm1,%rax
   0x0000000000001b32 <+370>:	49 83 e3 f0	and    $0xfffffffffffffff0,%r11
   0x0000000000001b36 <+374>:	40 f6 c6 0f	test   $0xf,%sil
   0x0000000000001b3a <+378>:	0f 84 4d 01 00 00	je     0x1c8d <count_pairs+717>
   0x0000000000001b40 <+384>:	c5 f8 77	vzeroupper 
   0x0000000000001b43 <+387>:	49 89 f1	mov    %rsi,%r9
   0x0000000000001b46 <+390>:	4d 29 d9	sub    %r11,%r9
   0x0000000000001b49 <+393>:	49 8d 51 ff	lea    -0x1(%r9),%rdx
   0x0000000000001b4d <+397>:	48 83 fa 06	cmp    $0x6,%rdx
   0x0000000000001b51 <+401>:	76 7b	jbe    0x1bce <count_pairs+526>

11	    total += (data[i] == check);
   0x0000000000001b53 <+403>:	62 d2 7d 08 7b f0	vpbroadcastw %r8d,%xmm6
   0x0000000000001b59 <+409>:	c4 a1 49 75 3c 5f	vpcmpeqw (%rdi,%r11,2),%xmm6,%xmm7
   0x0000000000001b5f <+415>:	c4 62 79 79 05 8c 05 00 00	vpbroadcastw 0x58c(%rip),%xmm8        # 0x20f4
   0x0000000000001b68 <+424>:	4d 89 ca	mov    %r9,%r10
   0x0000000000001b6b <+427>:	c4 41 41 db c8	vpand  %xmm8,%xmm7,%xmm9
   0x0000000000001b70 <+432>:	c4 c1 21 73 d9 08	vpsrldq $0x8,%xmm9,%xmm11
   0x0000000000001b76 <+438>:	c4 42 79 33 d1	vpmovzxwd %xmm9,%xmm10
   0x0000000000001b7b <+443>:	c4 42 79 33 e3	vpmovzxwd %xmm11,%xmm12
   0x0000000000001b80 <+448>:	c4 c1 09 73 da 08	vpsrldq $0x8,%xmm10,%xmm14
   0x0000000000001b86 <+454>:	c4 c1 59 73 dc 08	vpsrldq $0x8,%xmm12,%xmm4
   0x0000000000001b8c <+460>:	c4 42 79 35 ea	vpmovzxdq %xmm10,%xmm13
   0x0000000000001b91 <+465>:	c4 c2 79 35 c6	vpmovzxdq %xmm14,%xmm0
   0x0000000000001b96 <+470>:	c4 c2 79 35 d4	vpmovzxdq %xmm12,%xmm2
   0x0000000000001b9b <+475>:	c4 62 79 35 fc	vpmovzxdq %xmm4,%xmm15
   0x0000000000001ba0 <+480>:	c5 91 d4 e8	vpaddq %xmm0,%xmm13,%xmm5
   0x0000000000001ba4 <+484>:	c4 c1 69 d4 df	vpaddq %xmm15,%xmm2,%xmm3
   0x0000000000001ba9 <+489>:	c5 d1 d4 f3	vpaddq %xmm3,%xmm5,%xmm6

10	  for (uint64_t i = 0; i < size; i++) {
   0x0000000000001bad <+493>:	c5 f1 73 de 08	vpsrldq $0x8,%xmm6,%xmm1
   0x0000000000001bb2 <+498>:	c5 c9 d4 f9	vpaddq %xmm1,%xmm6,%xmm7
   0x0000000000001bb6 <+502>:	c4 e1 f9 7e f9	vmovq  %xmm7,%rcx
   0x0000000000001bbb <+507>:	49 83 e2 f8	and    $0xfffffffffffffff8,%r10
   0x0000000000001bbf <+511>:	48 01 c8	add    %rcx,%rax
   0x0000000000001bc2 <+514>:	4d 01 d3	add    %r10,%r11
   0x0000000000001bc5 <+517>:	4d 39 d1	cmp    %r10,%r9
   0x0000000000001bc8 <+520>:	0f 84 b4 00 00 00	je     0x1c82 <count_pairs+706>

11	    total += (data[i] == check);
   0x0000000000001bce <+526>:	45 31 c9	xor    %r9d,%r9d
   0x0000000000001bd1 <+529>:	66 46 39 04 5f	cmp    %r8w,(%rdi,%r11,2)
   0x0000000000001bd6 <+534>:	41 0f 94 c1	sete   %r9b
   0x0000000000001bda <+538>:	49 8d 4b 01	lea    0x1(%r11),%rcx
   0x0000000000001bde <+542>:	4b 8d 14 1b	lea    (%r11,%r11,1),%rdx
   0x0000000000001be2 <+546>:	4c 01 c8	add    %r9,%rax

10	  for (uint64_t i = 0; i < size; i++) {
   0x0000000000001be5 <+549>:	48 39 ce	cmp    %rcx,%rsi
   0x0000000000001be8 <+552>:	0f 86 94 00 00 00	jbe    0x1c82 <count_pairs+706>

11	    total += (data[i] == check);
   0x0000000000001bee <+558>:	45 31 d2	xor    %r10d,%r10d
   0x0000000000001bf1 <+561>:	66 44 39 44 17 02	cmp    %r8w,0x2(%rdi,%rdx,1)
   0x0000000000001bf7 <+567>:	41 0f 94 c2	sete   %r10b
   0x0000000000001bfb <+571>:	4d 8d 4b 02	lea    0x2(%r11),%r9
   0x0000000000001bff <+575>:	4c 01 d0	add    %r10,%rax

10	  for (uint64_t i = 0; i < size; i++) {
   0x0000000000001c02 <+578>:	49 39 f1	cmp    %rsi,%r9
   0x0000000000001c05 <+581>:	73 7b	jae    0x1c82 <count_pairs+706>

11	    total += (data[i] == check);
   0x0000000000001c07 <+583>:	31 c9	xor    %ecx,%ecx
   0x0000000000001c09 <+585>:	66 44 39 44 17 04	cmp    %r8w,0x4(%rdi,%rdx,1)
   0x0000000000001c0f <+591>:	0f 94 c1	sete   %cl
   0x0000000000001c12 <+594>:	4d 8d 53 03	lea    0x3(%r11),%r10
   0x0000000000001c16 <+598>:	48 01 c8	add    %rcx,%rax

10	  for (uint64_t i = 0; i < size; i++) {
   0x0000000000001c19 <+601>:	4c 39 d6	cmp    %r10,%rsi
   0x0000000000001c1c <+604>:	76 64	jbe    0x1c82 <count_pairs+706>

11	    total += (data[i] == check);
   0x0000000000001c1e <+606>:	45 31 c9	xor    %r9d,%r9d
   0x0000000000001c21 <+609>:	66 44 39 44 17 06	cmp    %r8w,0x6(%rdi,%rdx,1)
   0x0000000000001c27 <+615>:	41 0f 94 c1	sete   %r9b
   0x0000000000001c2b <+619>:	49 8d 4b 04	lea    0x4(%r11),%rcx
   0x0000000000001c2f <+623>:	4c 01 c8	add    %r9,%rax

10	  for (uint64_t i = 0; i < size; i++) {
   0x0000000000001c32 <+626>:	48 39 ce	cmp    %rcx,%rsi
   0x0000000000001c35 <+629>:	76 4b	jbe    0x1c82 <count_pairs+706>

11	    total += (data[i] == check);
   0x0000000000001c37 <+631>:	45 31 d2	xor    %r10d,%r10d
   0x0000000000001c3a <+634>:	66 44 39 44 17 08	cmp    %r8w,0x8(%rdi,%rdx,1)
   0x0000000000001c40 <+640>:	41 0f 94 c2	sete   %r10b
   0x0000000000001c44 <+644>:	4d 8d 4b 05	lea    0x5(%r11),%r9
   0x0000000000001c48 <+648>:	4c 01 d0	add    %r10,%rax

10	  for (uint64_t i = 0; i < size; i++) {
   0x0000000000001c4b <+651>:	4c 39 ce	cmp    %r9,%rsi
   0x0000000000001c4e <+654>:	76 32	jbe    0x1c82 <count_pairs+706>

11	    total += (data[i] == check);
   0x0000000000001c50 <+656>:	31 c9	xor    %ecx,%ecx
   0x0000000000001c52 <+658>:	66 44 39 44 17 0a	cmp    %r8w,0xa(%rdi,%rdx,1)
   0x0000000000001c58 <+664>:	0f 94 c1	sete   %cl
   0x0000000000001c5b <+667>:	49 83 c3 06	add    $0x6,%r11
   0x0000000000001c5f <+671>:	48 01 c8	add    %rcx,%rax

10	  for (uint64_t i = 0; i < size; i++) {
   0x0000000000001c62 <+674>:	4c 39 de	cmp    %r11,%rsi
   0x0000000000001c65 <+677>:	76 1b	jbe    0x1c82 <count_pairs+706>

11	    total += (data[i] == check);
   0x0000000000001c67 <+679>:	66 44 39 44 17 0c	cmp    %r8w,0xc(%rdi,%rdx,1)
   0x0000000000001c6d <+685>:	40 0f 94 c6	sete   %sil
   0x0000000000001c71 <+689>:	40 0f b6 fe	movzbl %sil,%edi
   0x0000000000001c75 <+693>:	48 01 f8	add    %rdi,%rax

10	  for (uint64_t i = 0; i < size; i++) {
   0x0000000000001c78 <+696>:	c3	retq   
   0x0000000000001c79 <+697>:	0f 1f 80 00 00 00 00	nopl   0x0(%rax)
   0x0000000000001c80 <+704>:	31 c0	xor    %eax,%eax

12	  }
13	  return total;
   0x0000000000001c82 <+706>:	c3	retq   
   0x0000000000001c83 <+707>:	45 31 db	xor    %r11d,%r11d
   0x0000000000001c86 <+710>:	31 c0	xor    %eax,%eax
   0x0000000000001c88 <+712>:	e9 b6 fe ff ff	jmpq   0x1b43 <count_pairs+387>
   0x0000000000001c8d <+717>:	c5 f8 77	vzeroupper 
   0x0000000000001c90 <+720>:	c3	retq   
End of assembler dump.
