Dump of assembler code for function count_pairs:
count_pairs-a.c:
9	  unsigned short check = target | (target << 8U);
   0x0000000000001450 <+0>:	89 d1	mov    %edx,%ecx
   0x0000000000001452 <+2>:	c1 e1 08	shl    $0x8,%ecx
   0x0000000000001455 <+5>:	09 d1	or     %edx,%ecx
   0x0000000000001457 <+7>:	48 8d 04 75 fe ff ff ff	lea    -0x2(,%rsi,2),%rax

10	  for (unsigned long i = 0; i < size * 2 - 1; i++) {
   0x000000000000145f <+15>:	4c 8d 04 75 ff ff ff ff	lea    -0x1(,%rsi,2),%r8
   0x0000000000001467 <+23>:	44 89 c2	mov    %r8d,%edx
   0x000000000000146a <+26>:	83 e2 03	and    $0x3,%edx
   0x000000000000146d <+29>:	48 83 f8 03	cmp    $0x3,%rax
   0x0000000000001471 <+33>:	73 06	jae    0x1479 <count_pairs+41>
   0x0000000000001473 <+35>:	31 f6	xor    %esi,%esi
   0x0000000000001475 <+37>:	31 c0	xor    %eax,%eax
   0x0000000000001477 <+39>:	eb 65	jmp    0x14de <count_pairs+142>
   0x0000000000001479 <+41>:	49 83 e0 fc	and    $0xfffffffffffffffc,%r8
   0x000000000000147d <+45>:	31 f6	xor    %esi,%esi
   0x000000000000147f <+47>:	31 c0	xor    %eax,%eax
   0x0000000000001481 <+49>:	66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00	data16 data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)

./helpers.h:
44	  memcpy(&data, loc, sizeof(data));
   0x0000000000001490 <+64>:	44 0f b7 0c 37	movzwl (%rdi,%rsi,1),%r9d

count_pairs-a.c:
11	    total += (load16(data + i) == check);
   0x0000000000001495 <+69>:	45 31 d2	xor    %r10d,%r10d
   0x0000000000001498 <+72>:	44 39 c9	cmp    %r9d,%ecx
   0x000000000000149b <+75>:	41 0f 94 c2	sete   %r10b
   0x000000000000149f <+79>:	49 01 c2	add    %rax,%r10

./helpers.h:
44	  memcpy(&data, loc, sizeof(data));
   0x00000000000014a2 <+82>:	0f b7 44 37 01	movzwl 0x1(%rdi,%rsi,1),%eax

count_pairs-a.c:
11	    total += (load16(data + i) == check);
   0x00000000000014a7 <+87>:	45 31 c9	xor    %r9d,%r9d
   0x00000000000014aa <+90>:	39 c1	cmp    %eax,%ecx
   0x00000000000014ac <+92>:	41 0f 94 c1	sete   %r9b

./helpers.h:
44	  memcpy(&data, loc, sizeof(data));
   0x00000000000014b0 <+96>:	0f b7 44 37 02	movzwl 0x2(%rdi,%rsi,1),%eax

count_pairs-a.c:
11	    total += (load16(data + i) == check);
   0x00000000000014b5 <+101>:	45 31 db	xor    %r11d,%r11d
   0x00000000000014b8 <+104>:	39 c1	cmp    %eax,%ecx
   0x00000000000014ba <+106>:	41 0f 94 c3	sete   %r11b
   0x00000000000014be <+110>:	4d 01 cb	add    %r9,%r11
   0x00000000000014c1 <+113>:	4d 01 d3	add    %r10,%r11

./helpers.h:
44	  memcpy(&data, loc, sizeof(data));
   0x00000000000014c4 <+116>:	44 0f b7 4c 37 03	movzwl 0x3(%rdi,%rsi,1),%r9d

count_pairs-a.c:
11	    total += (load16(data + i) == check);
   0x00000000000014ca <+122>:	31 c0	xor    %eax,%eax
   0x00000000000014cc <+124>:	44 39 c9	cmp    %r9d,%ecx
   0x00000000000014cf <+127>:	0f 94 c0	sete   %al
   0x00000000000014d2 <+130>:	4c 01 d8	add    %r11,%rax

10	  for (unsigned long i = 0; i < size * 2 - 1; i++) {
   0x00000000000014d5 <+133>:	48 83 c6 04	add    $0x4,%rsi
   0x00000000000014d9 <+137>:	49 39 f0	cmp    %rsi,%r8
   0x00000000000014dc <+140>:	75 b2	jne    0x1490 <count_pairs+64>
   0x00000000000014de <+142>:	48 01 f7	add    %rsi,%rdi
   0x00000000000014e1 <+145>:	31 f6	xor    %esi,%esi
   0x00000000000014e3 <+147>:	66 66 66 66 2e 0f 1f 84 00 00 00 00 00	data16 data16 data16 cs nopw 0x0(%rax,%rax,1)

./helpers.h:
44	  memcpy(&data, loc, sizeof(data));
   0x00000000000014f0 <+160>:	44 0f b7 04 37	movzwl (%rdi,%rsi,1),%r8d

count_pairs-a.c:
11	    total += (load16(data + i) == check);
   0x00000000000014f5 <+165>:	45 31 c9	xor    %r9d,%r9d
   0x00000000000014f8 <+168>:	44 39 c1	cmp    %r8d,%ecx
   0x00000000000014fb <+171>:	41 0f 94 c1	sete   %r9b
   0x00000000000014ff <+175>:	4c 01 c8	add    %r9,%rax

10	  for (unsigned long i = 0; i < size * 2 - 1; i++) {
   0x0000000000001502 <+178>:	48 ff c6	inc    %rsi
   0x0000000000001505 <+181>:	48 39 f2	cmp    %rsi,%rdx
   0x0000000000001508 <+184>:	75 e6	jne    0x14f0 <count_pairs+160>

12	  }
13	  return total;
   0x000000000000150a <+186>:	c3	ret    
End of assembler dump.
