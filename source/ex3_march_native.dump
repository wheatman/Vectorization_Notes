Dump of assembler code for function Decode:
ex3a.c:
12	decode_return Decode(const uint8_t *loc) {
   0x0000000000001630 <+0>:	f3 0f 1e fa	endbr64 

13	  // first check the case if we only use 1 byte by checking the top bit of the first byte
14	  // this is done becuase we need to special case what happens if we are 0
15	  decode_return ret;
16	  if ((*loc & 0x80UL) == 0) {
   0x0000000000001634 <+4>:	0f b6 07	movzbl (%rdi),%eax
   0x0000000000001637 <+7>:	84 c0	test   %al,%al
   0x0000000000001639 <+9>:	79 3d	jns    0x1678 <Decode+72>

20	  }
21	  ret.difference = *loc & 0x7FUL;
   0x000000000000163b <+11>:	83 e0 7f	and    $0x7f,%eax

22	  ret.old_size = 1;
23	  uint64_t shift_amount = 7;
   0x000000000000163e <+14>:	41 b8 01 00 00 00	mov    $0x1,%r8d
   0x0000000000001644 <+20>:	b9 07 00 00 00	mov    $0x7,%ecx
   0x0000000000001649 <+25>:	0f 1f 80 00 00 00 00	nopl   0x0(%rax)

24	  // loop over each byte and shift the bits to the correct position
25	  do {
26	    loc += 1;
27	    ret.difference = ret.difference | ((*loc & 0x7FUL) << shift_amount);
   0x0000000000001650 <+32>:	42 0f b6 34 07	movzbl (%rdi,%r8,1),%esi
   0x0000000000001655 <+37>:	49 ff c0	inc    %r8
   0x0000000000001658 <+40>:	48 89 f2	mov    %rsi,%rdx
   0x000000000000165b <+43>:	83 e2 7f	and    $0x7f,%edx
   0x000000000000165e <+46>:	c4 e2 f1 f7 d2	shlx   %rcx,%rdx,%rdx
   0x0000000000001663 <+51>:	48 83 c1 07	add    $0x7,%rcx
   0x0000000000001667 <+55>:	48 09 d0	or     %rdx,%rax

28	    ret.old_size += 1;
29	    shift_amount += 7;
30	  } while (*loc & 0x80UL);
   0x000000000000166a <+58>:	40 84 f6	test   %sil,%sil
   0x000000000000166d <+61>:	78 e1	js     0x1650 <Decode+32>
   0x000000000000166f <+63>:	4c 89 c2	mov    %r8,%rdx
   0x0000000000001672 <+66>:	c3	retq   
   0x0000000000001673 <+67>:	0f 1f 44 00 00	nopl   0x0(%rax,%rax,1)

17	    ret.old_size = *loc > 0;
   0x0000000000001678 <+72>:	41 0f 95 c0	setne  %r8b
   0x000000000000167c <+76>:	45 0f b6 c0	movzbl %r8b,%r8d

18	    ret.difference = *loc;
19	    return ret;
   0x0000000000001680 <+80>:	4c 89 c2	mov    %r8,%rdx
   0x0000000000001683 <+83>:	c3	retq   
End of assembler dump.
