Dump of assembler code for function count_pairs:
count_pairs-a.c:
7	count_pairs(unsigned char *data, unsigned long size, unsigned char target) {
   0x0000000000001490 <+0>:	55	push   %rbp
   0x0000000000001491 <+1>:	48 89 e5	mov    %rsp,%rbp
   0x0000000000001494 <+4>:	48 83 ec 30	sub    $0x30,%rsp
   0x0000000000001498 <+8>:	88 d0	mov    %dl,%al
   0x000000000000149a <+10>:	48 89 7d f8	mov    %rdi,-0x8(%rbp)
   0x000000000000149e <+14>:	48 89 75 f0	mov    %rsi,-0x10(%rbp)
   0x00000000000014a2 <+18>:	88 45 ef	mov    %al,-0x11(%rbp)

8	  unsigned long total = 0;
   0x00000000000014a5 <+21>:	48 c7 45 e0 00 00 00 00	movq   $0x0,-0x20(%rbp)

9	  unsigned short check = target | (target << 8U);
   0x00000000000014ad <+29>:	0f b6 45 ef	movzbl -0x11(%rbp),%eax
   0x00000000000014b1 <+33>:	0f b6 4d ef	movzbl -0x11(%rbp),%ecx
   0x00000000000014b5 <+37>:	c1 e1 08	shl    $0x8,%ecx
   0x00000000000014b8 <+40>:	09 c8	or     %ecx,%eax
   0x00000000000014ba <+42>:	66 89 45 de	mov    %ax,-0x22(%rbp)

10	  for (unsigned long i = 0; i < size * 2 - 1; i++) {
   0x00000000000014be <+46>:	48 c7 45 d0 00 00 00 00	movq   $0x0,-0x30(%rbp)
   0x00000000000014c6 <+54>:	48 8b 45 d0	mov    -0x30(%rbp),%rax
   0x00000000000014ca <+58>:	48 8b 4d f0	mov    -0x10(%rbp),%rcx
   0x00000000000014ce <+62>:	48 d1 e1	shl    %rcx
   0x00000000000014d1 <+65>:	48 83 e9 01	sub    $0x1,%rcx
   0x00000000000014d5 <+69>:	48 39 c8	cmp    %rcx,%rax
   0x00000000000014d8 <+72>:	0f 83 39 00 00 00	jae    0x1517 <count_pairs+135>

11	    total += (load16(data + i) == check);
   0x00000000000014de <+78>:	48 8b 7d f8	mov    -0x8(%rbp),%rdi
   0x00000000000014e2 <+82>:	48 03 7d d0	add    -0x30(%rbp),%rdi
   0x00000000000014e6 <+86>:	e8 65 fd ff ff	call   0x1250 <load16>
   0x00000000000014eb <+91>:	0f b7 c0	movzwl %ax,%eax
   0x00000000000014ee <+94>:	0f b7 4d de	movzwl -0x22(%rbp),%ecx
   0x00000000000014f2 <+98>:	39 c8	cmp    %ecx,%eax
   0x00000000000014f4 <+100>:	0f 94 c0	sete   %al
   0x00000000000014f7 <+103>:	24 01	and    $0x1,%al
   0x00000000000014f9 <+105>:	0f b6 c0	movzbl %al,%eax
   0x00000000000014fc <+108>:	48 98	cltq   
   0x00000000000014fe <+110>:	48 03 45 e0	add    -0x20(%rbp),%rax
   0x0000000000001502 <+114>:	48 89 45 e0	mov    %rax,-0x20(%rbp)

10	  for (unsigned long i = 0; i < size * 2 - 1; i++) {
   0x0000000000001506 <+118>:	48 8b 45 d0	mov    -0x30(%rbp),%rax
   0x000000000000150a <+122>:	48 83 c0 01	add    $0x1,%rax
   0x000000000000150e <+126>:	48 89 45 d0	mov    %rax,-0x30(%rbp)
   0x0000000000001512 <+130>:	e9 af ff ff ff	jmp    0x14c6 <count_pairs+54>

12	  }
13	  return total;
   0x0000000000001517 <+135>:	48 8b 45 e0	mov    -0x20(%rbp),%rax
   0x000000000000151b <+139>:	48 83 c4 30	add    $0x30,%rsp
   0x000000000000151f <+143>:	5d	pop    %rbp
   0x0000000000001520 <+144>:	c3	ret    
End of assembler dump.
