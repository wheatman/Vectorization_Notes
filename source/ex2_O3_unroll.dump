Dump of assembler code for function count_pairs:
ex2a.c:
7	count_pairs(uint8_t *data, uint64_t size, uint8_t target) {
   0x00000000000019c0 <+0>:	f3 0f 1e fa	endbr64 

8	  uint64_t total = 0;
9	  uint16_t check = target | (target << 8U);
   0x00000000000019c4 <+4>:	48 8d 74 77 ff	lea    -0x1(%rdi,%rsi,2),%rsi
   0x00000000000019c9 <+9>:	41 89 d0	mov    %edx,%r8d
   0x00000000000019cc <+12>:	0f b6 d2	movzbl %dl,%edx
   0x00000000000019cf <+15>:	31 c0	xor    %eax,%eax
   0x00000000000019d1 <+17>:	48 89 f1	mov    %rsi,%rcx
   0x00000000000019d4 <+20>:	41 c1 e0 08	shl    $0x8,%r8d
   0x00000000000019d8 <+24>:	48 29 f9	sub    %rdi,%rcx
   0x00000000000019db <+27>:	41 09 d0	or     %edx,%r8d

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x00000000000019de <+30>:	83 e1 07	and    $0x7,%ecx
   0x00000000000019e1 <+33>:	0f 84 99 00 00 00	je     0x1a80 <count_pairs+192>
   0x00000000000019e7 <+39>:	48 83 f9 01	cmp    $0x1,%rcx
   0x00000000000019eb <+43>:	74 78	je     0x1a65 <count_pairs+165>
   0x00000000000019ed <+45>:	48 83 f9 02	cmp    $0x2,%rcx
   0x00000000000019f1 <+49>:	74 62	je     0x1a55 <count_pairs+149>
   0x00000000000019f3 <+51>:	48 83 f9 03	cmp    $0x3,%rcx
   0x00000000000019f7 <+55>:	74 4c	je     0x1a45 <count_pairs+133>
   0x00000000000019f9 <+57>:	48 83 f9 04	cmp    $0x4,%rcx
   0x00000000000019fd <+61>:	74 34	je     0x1a33 <count_pairs+115>
   0x00000000000019ff <+63>:	48 83 f9 05	cmp    $0x5,%rcx
   0x0000000000001a03 <+67>:	74 1c	je     0x1a21 <count_pairs+97>
   0x0000000000001a05 <+69>:	48 83 f9 06	cmp    $0x6,%rcx
   0x0000000000001a09 <+73>:	0f 85 f1 00 00 00	jne    0x1b00 <count_pairs+320>

11	    total += (load16(data + i) == check);
   0x0000000000001a0f <+79>:	45 31 c9	xor    %r9d,%r9d
   0x0000000000001a12 <+82>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a16 <+86>:	41 0f 94 c1	sete   %r9b
   0x0000000000001a1a <+90>:	48 83 c7 01	add    $0x1,%rdi
   0x0000000000001a1e <+94>:	4c 01 c8	add    %r9,%rax
   0x0000000000001a21 <+97>:	45 31 d2	xor    %r10d,%r10d
   0x0000000000001a24 <+100>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a28 <+104>:	41 0f 94 c2	sete   %r10b
   0x0000000000001a2c <+108>:	48 83 c7 01	add    $0x1,%rdi
   0x0000000000001a30 <+112>:	4c 01 d0	add    %r10,%rax
   0x0000000000001a33 <+115>:	45 31 db	xor    %r11d,%r11d
   0x0000000000001a36 <+118>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a3a <+122>:	41 0f 94 c3	sete   %r11b
   0x0000000000001a3e <+126>:	48 83 c7 01	add    $0x1,%rdi
   0x0000000000001a42 <+130>:	4c 01 d8	add    %r11,%rax
   0x0000000000001a45 <+133>:	31 d2	xor    %edx,%edx
   0x0000000000001a47 <+135>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a4b <+139>:	0f 94 c2	sete   %dl
   0x0000000000001a4e <+142>:	48 83 c7 01	add    $0x1,%rdi
   0x0000000000001a52 <+146>:	48 01 d0	add    %rdx,%rax
   0x0000000000001a55 <+149>:	31 c9	xor    %ecx,%ecx
   0x0000000000001a57 <+151>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a5b <+155>:	0f 94 c1	sete   %cl
   0x0000000000001a5e <+158>:	48 83 c7 01	add    $0x1,%rdi
   0x0000000000001a62 <+162>:	48 01 c8	add    %rcx,%rax
   0x0000000000001a65 <+165>:	45 31 c9	xor    %r9d,%r9d
   0x0000000000001a68 <+168>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a6c <+172>:	41 0f 94 c1	sete   %r9b
   0x0000000000001a70 <+176>:	48 83 c7 01	add    $0x1,%rdi
   0x0000000000001a74 <+180>:	4c 01 c8	add    %r9,%rax

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x0000000000001a77 <+183>:	48 39 fe	cmp    %rdi,%rsi
   0x0000000000001a7a <+186>:	0f 84 98 00 00 00	je     0x1b18 <count_pairs+344>

11	    total += (load16(data + i) == check);
   0x0000000000001a80 <+192>:	45 31 d2	xor    %r10d,%r10d
   0x0000000000001a83 <+195>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001a87 <+199>:	41 0f 94 c2	sete   %r10b
   0x0000000000001a8b <+203>:	45 31 db	xor    %r11d,%r11d
   0x0000000000001a8e <+206>:	4c 01 d0	add    %r10,%rax
   0x0000000000001a91 <+209>:	66 44 39 47 01	cmp    %r8w,0x1(%rdi)
   0x0000000000001a96 <+214>:	41 0f 94 c3	sete   %r11b
   0x0000000000001a9a <+218>:	31 d2	xor    %edx,%edx
   0x0000000000001a9c <+220>:	4c 01 d8	add    %r11,%rax
   0x0000000000001a9f <+223>:	66 44 39 47 02	cmp    %r8w,0x2(%rdi)
   0x0000000000001aa4 <+228>:	0f 94 c2	sete   %dl
   0x0000000000001aa7 <+231>:	31 c9	xor    %ecx,%ecx
   0x0000000000001aa9 <+233>:	48 01 d0	add    %rdx,%rax
   0x0000000000001aac <+236>:	66 44 39 47 03	cmp    %r8w,0x3(%rdi)
   0x0000000000001ab1 <+241>:	0f 94 c1	sete   %cl
   0x0000000000001ab4 <+244>:	45 31 c9	xor    %r9d,%r9d
   0x0000000000001ab7 <+247>:	48 01 c8	add    %rcx,%rax
   0x0000000000001aba <+250>:	66 44 39 47 04	cmp    %r8w,0x4(%rdi)
   0x0000000000001abf <+255>:	41 0f 94 c1	sete   %r9b
   0x0000000000001ac3 <+259>:	45 31 d2	xor    %r10d,%r10d
   0x0000000000001ac6 <+262>:	4c 01 c8	add    %r9,%rax
   0x0000000000001ac9 <+265>:	66 44 39 47 05	cmp    %r8w,0x5(%rdi)
   0x0000000000001ace <+270>:	41 0f 94 c2	sete   %r10b
   0x0000000000001ad2 <+274>:	45 31 db	xor    %r11d,%r11d
   0x0000000000001ad5 <+277>:	4c 01 d0	add    %r10,%rax
   0x0000000000001ad8 <+280>:	66 44 39 47 06	cmp    %r8w,0x6(%rdi)
   0x0000000000001add <+285>:	41 0f 94 c3	sete   %r11b
   0x0000000000001ae1 <+289>:	31 d2	xor    %edx,%edx
   0x0000000000001ae3 <+291>:	4c 01 d8	add    %r11,%rax
   0x0000000000001ae6 <+294>:	66 44 39 47 07	cmp    %r8w,0x7(%rdi)
   0x0000000000001aeb <+299>:	0f 94 c2	sete   %dl
   0x0000000000001aee <+302>:	48 83 c7 08	add    $0x8,%rdi
   0x0000000000001af2 <+306>:	48 01 d0	add    %rdx,%rax

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x0000000000001af5 <+309>:	48 39 fe	cmp    %rdi,%rsi
   0x0000000000001af8 <+312>:	75 86	jne    0x1a80 <count_pairs+192>

12	  }
13	  return total;
   0x0000000000001afa <+314>:	c3	retq   
   0x0000000000001afb <+315>:	0f 1f 44 00 00	nopl   0x0(%rax,%rax,1)

11	    total += (load16(data + i) == check);
   0x0000000000001b00 <+320>:	31 c0	xor    %eax,%eax
   0x0000000000001b02 <+322>:	66 44 39 07	cmp    %r8w,(%rdi)
   0x0000000000001b06 <+326>:	0f 94 c0	sete   %al

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x0000000000001b09 <+329>:	48 83 c7 01	add    $0x1,%rdi
   0x0000000000001b0d <+333>:	e9 fd fe ff ff	jmpq   0x1a0f <count_pairs+79>
   0x0000000000001b12 <+338>:	66 0f 1f 44 00 00	nopw   0x0(%rax,%rax,1)
   0x0000000000001b18 <+344>:	c3	retq   
End of assembler dump.
