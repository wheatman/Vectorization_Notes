Dump of assembler code for function count_pairs:
ex2a.c:
7	count_pairs(uint8_t *data, uint64_t size, uint8_t target) {
   0x0000000000001567 <+0>:	f3 0f 1e fa	endbr64 
   0x000000000000156b <+4>:	55	push   %rbp
   0x000000000000156c <+5>:	48 89 e5	mov    %rsp,%rbp
   0x000000000000156f <+8>:	48 83 ec 40	sub    $0x40,%rsp
   0x0000000000001573 <+12>:	48 89 7d d8	mov    %rdi,-0x28(%rbp)
   0x0000000000001577 <+16>:	48 89 75 d0	mov    %rsi,-0x30(%rbp)
   0x000000000000157b <+20>:	89 d0	mov    %edx,%eax
   0x000000000000157d <+22>:	88 45 cc	mov    %al,-0x34(%rbp)

8	  uint64_t total = 0;
   0x0000000000001580 <+25>:	48 c7 45 f0 00 00 00 00	movq   $0x0,-0x10(%rbp)

9	  uint16_t check = target | (target << 8U);
   0x0000000000001588 <+33>:	0f b6 55 cc	movzbl -0x34(%rbp),%edx
   0x000000000000158c <+37>:	0f b6 45 cc	movzbl -0x34(%rbp),%eax
   0x0000000000001590 <+41>:	c1 e0 08	shl    $0x8,%eax
   0x0000000000001593 <+44>:	09 d0	or     %edx,%eax
   0x0000000000001595 <+46>:	66 89 45 ee	mov    %ax,-0x12(%rbp)

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x0000000000001599 <+50>:	48 c7 45 f8 00 00 00 00	movq   $0x0,-0x8(%rbp)
   0x00000000000015a1 <+58>:	eb 28	jmp    0x15cb <count_pairs+100>

11	    total += (load16(data + i) == check);
   0x00000000000015a3 <+60>:	48 8b 55 d8	mov    -0x28(%rbp),%rdx
   0x00000000000015a7 <+64>:	48 8b 45 f8	mov    -0x8(%rbp),%rax
   0x00000000000015ab <+68>:	48 01 d0	add    %rdx,%rax
   0x00000000000015ae <+71>:	48 89 c7	mov    %rax,%rdi
   0x00000000000015b1 <+74>:	e8 4f fd ff ff	callq  0x1305 <load16>
   0x00000000000015b6 <+79>:	66 39 45 ee	cmp    %ax,-0x12(%rbp)
   0x00000000000015ba <+83>:	0f 94 c0	sete   %al
   0x00000000000015bd <+86>:	0f b6 c0	movzbl %al,%eax
   0x00000000000015c0 <+89>:	48 98	cltq   
   0x00000000000015c2 <+91>:	48 01 45 f0	add    %rax,-0x10(%rbp)

10	  for (uint64_t i = 0; i < size * 2 - 1; i++) {
   0x00000000000015c6 <+95>:	48 83 45 f8 01	addq   $0x1,-0x8(%rbp)
   0x00000000000015cb <+100>:	48 8b 45 d0	mov    -0x30(%rbp),%rax
   0x00000000000015cf <+104>:	48 01 c0	add    %rax,%rax
   0x00000000000015d2 <+107>:	48 83 e8 01	sub    $0x1,%rax
   0x00000000000015d6 <+111>:	48 39 45 f8	cmp    %rax,-0x8(%rbp)
   0x00000000000015da <+115>:	72 c7	jb     0x15a3 <count_pairs+60>

12	  }
13	  return total;
   0x00000000000015dc <+117>:	48 8b 45 f0	mov    -0x10(%rbp),%rax

14	}
   0x00000000000015e0 <+121>:	c9	leaveq 
   0x00000000000015e1 <+122>:	c3	retq   
End of assembler dump.
